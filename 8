# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.datasets import fetch_california_housing
from sklearn.preprocessing import StandardScaler

# Step 1: Load the California Housing dataset
data = fetch_california_housing()

# Create a DataFrame
df = pd.DataFrame(data=data.data, columns=data.feature_names)
df['Target'] = data.target  # Target variable (house prices)

# Step 2: Preprocess the data

# Separate features (X) and target variable (y)
X = df.drop('Target', axis=1)
y = df['Target']

# Split the data into training and testing sets (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Feature scaling (standardizing the data)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)  # Fit on training data and transform
X_test_scaled = scaler.transform(X_test)        # Only transform the test data

# Step 4: Initialize the Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Step 5: Train the model
rf_model.fit(X_train_scaled, y_train)

# Step 6: Make predictions
y_pred = rf_model.predict(X_test_scaled)

# Step 7: Evaluate the model
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2) Score:", r2_score(y_test, y_pred))
