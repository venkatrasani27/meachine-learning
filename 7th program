import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

# Sigmoid function to model the probability
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Logistic Regression Class
class LogisticRegression:
    def __init__(self, learning_rate=0.01, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        # Initialize weights and bias
        num_features = X.shape[1]
        self.weights = np.zeros(num_features)
        self.bias = 0
        
        # Gradient descent to optimize weights and bias
        for epoch in range(self.epochs):
            # Linear combination of weights and inputs
            z = np.dot(X, self.weights) + self.bias
            predictions = sigmoid(z)
            
            # Compute gradients
            dw = (1 / X.shape[0]) * np.dot(X.T, (predictions - y))
            db = (1 / X.shape[0]) * np.sum(predictions - y)
            
            # Update weights and bias using gradient descent
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

            if epoch % 100 == 0:
                loss = -(1 / X.shape[0]) * np.sum(y * np.log(predictions) + (1 - y) * np.log(1 - predictions))
                print(f'Epoch {epoch}/{self.epochs}, Loss: {loss}')

    def predict(self, X):
        # Calculate probabilities and convert to binary predictions
        z = np.dot(X, self.weights) + self.bias
        predictions = sigmoid(z)
        return [1 if p >= 0.5 else 0 for p in predictions]

# Load the Iris dataset and convert to binary classification (Setosa vs Non-setosa)
iris = datasets.load_iris()
X = iris.data
y = iris.target

# We will classify whether the sample is of class 0 (Setosa) or not (Non-setosa)
y = (y == 0).astype(int)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create the Logistic Regression model and train it
model = LogisticRegression(learning_rate=0.1, epochs=1000)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using accuracy and confusion matrix
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("\nAccuracy: ", accuracy)
print("\nConfusion Matrix:")
print(conf_matrix)
