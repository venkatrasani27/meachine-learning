import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

# Generate a dataset with a nonlinear relationship
X, y = make_regression(n_samples=200, n_features=1, noise=30, random_state=42)

# Add a nonlinear component to the data to simulate real-world scenarios (for comparison)
y = y + 20 * np.sin(X).ravel()  # Adding sinusoidal noise to create a non-linear relationship

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression Model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Polynomial Regression Model (degree 3 for this example)
polynomial_features = PolynomialFeatures(degree=3)
X_train_poly = polynomial_features.fit_transform(X_train)
X_test_poly = polynomial_features.transform(X_test)

polynomial_model = LinearRegression()
polynomial_model.fit(X_train_poly, y_train)

# Predictions
y_pred_linear = linear_model.predict(X_test)
y_pred_poly = polynomial_model.predict(X_test_poly)

# Evaluate the models using Mean Squared Error (MSE) and R² score
mse_linear = mean_squared_error(y_test, y_pred_linear)
mse_poly = mean_squared_error(y_test, y_pred_poly)

r2_linear = r2_score(y_test, y_pred_linear)
r2_poly = r2_score(y_test, y_pred_poly)

print(f"Linear Regression - MSE: {mse_linear:.2f}, R²: {r2_linear:.2f}")
print(f"Polynomial Regression - MSE: {mse_poly:.2f}, R²: {r2_poly:.2f}")

# Visualization
plt.figure(figsize=(12, 6))

# Plot Linear Regression
plt.subplot(1, 2, 1)
plt.scatter(X_test, y_test, color='blue', label='True values')
plt.plot(X_test, y_pred_linear, color='red', label='Linear Regression')
plt.title("Linear Regression")
plt.xlabel('Feature')
plt.ylabel('Target')
plt.legend()

# Plot Polynomial Regression
plt.subplot(1, 2, 2)
plt.scatter(X_test, y_test, color='blue', label='True values')
plt.plot(X_test, y_pred_poly, color='green', label='Polynomial Regression')
plt.title("Polynomial Regression")
plt.xlabel('Feature')
plt.ylabel('Target')
plt.legend()

plt.tight_layout()
plt.show()
