# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 1: Load the dataset
# Sample car price dataset (replace with your actual dataset)
data = {
    'Make': ['Toyota', 'Honda', 'Ford', 'BMW', 'Chevrolet', 'Nissan', 'Hyundai', 'Mercedes', 'Audi', 'Tesla'],
    'Model': ['Corolla', 'Civic', 'Focus', 'X5', 'Malibu', 'Altima', 'Elantra', 'C-Class', 'A4', 'Model S'],
    'Year': [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2021, 2020, 2022],
    'Mileage': [50000, 30000, 25000, 30000, 20000, 10000, 15000, 12000, 18000, 8000],
    'Fuel_Type': ['Petrol', 'Petrol', 'Diesel', 'Diesel', 'Petrol', 'Petrol', 'Petrol', 'Petrol', 'Diesel', 'Electric'],
    'Price': [15000, 14000, 12000, 30000, 13000, 17000, 15000, 35000, 25000, 70000]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Step 2: Data Preprocessing

# Encoding categorical variables using One-Hot Encoding (for 'Make' and 'Fuel_Type')
df = pd.get_dummies(df, columns=['Make', 'Fuel_Type'], drop_first=True)

# Separate features (X) and target (y)
X = df.drop('Price', axis=1)
y = df['Price']

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Feature Scaling (Standardization)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)  # Fit on the training data
X_test = scaler.transform(X_test)        # Only transform the test data

# Step 5: Initialize and Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Predict car prices on the test data
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2) Score:", r2_score(y_test, y_pred))
