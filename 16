import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Linear Regression Class using Gradient Descent
class LinearRegression:
    def __init__(self, learning_rate=0.01, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        # Initialize weights and bias
        num_samples, num_features = X.shape
        self.weights = np.zeros(num_features)
        self.bias = 0
        
        # Gradient Descent Algorithm
        for epoch in range(self.epochs):
            # Make predictions
            y_pred = np.dot(X, self.weights) + self.bias
            
            # Compute the gradients
            dw = (1 / num_samples) * np.dot(X.T, (y_pred - y))
            db = (1 / num_samples) * np.sum(y_pred - y)
            
            # Update the weights and bias using the gradients
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db
            
            # Optionally print loss during training (Mean Squared Error)
            if epoch % 100 == 0:
                mse = np.mean((y_pred - y) ** 2)
                print(f'Epoch {epoch}/{self.epochs}, MSE: {mse}')

    def predict(self, X):
        # Make predictions
        return np.dot(X, self.weights) + self.bias

# Generate a sample dataset for linear regression
X, y = make_regression(n_samples=100, n_features=1, noise=20, random_state=42)

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Instantiate the Linear Regression model and train it
model = LinearRegression(learning_rate=0.01, epochs=1000)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using MSE (Mean Squared Error) and R² score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R² Score: {r2}")

# Plotting the results (optional)
plt.scatter(X_test, y_test, color='blue', label='True values')
plt.plot(X_test, y_pred, color='red', label='Predicted values')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Linear Regression: True vs Predicted')
plt.legend()
plt.show()
