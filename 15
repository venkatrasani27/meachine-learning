import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

# Sample data (you can replace this with your actual dataset)
data = {
    'Income': [50000, 60000, 80000, 120000, 35000, 45000, 55000, 70000, 110000, 90000],
    'Age': [25, 30, 35, 45, 28, 40, 33, 50, 42, 38],
    'Number_of_loans': [1, 2, 1, 3, 2, 1, 2, 3, 1, 2],
    'Credit_History': [1, 1, 1, 0, 1, 1, 0, 1, 1, 0],
    'Credit_Score': ['Good', 'Good', 'Good', 'Poor', 'Fair', 'Fair', 'Poor', 'Good', 'Good', 'Fair']
}

# Create a DataFrame
df = pd.DataFrame(data)

# Convert the target variable (Credit_Score) into a numeric format
df['Credit_Score'] = df['Credit_Score'].map({'Good': 2, 'Fair': 1, 'Poor': 0})

# Features and Target
X = df.drop('Credit_Score', axis=1)
y = df['Credit_Score']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize the model (Logistic Regression in this case)
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Predict the target values on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
